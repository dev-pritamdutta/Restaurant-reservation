-------------This is all about the project and purpose of using it--------------------------------------------
---------------
Public Routes:
/: Renders the HomePage component.
/login: Renders the Login component.
/register: Renders the Register component.

Protected Routes:
/reservation: Renders the ReservationForm component, but only if the user is authenticated.
/user-dashboard: Renders the UserDashboard component, but only if the user is authenticated.

Global Components:
Navbar: Displays navigation links.
Footer: Displays footer information.
ToastContainer: Displays toast notifications.

-----example------
<Routes>
  {/* Public Routes */}
  <Route path="/" element={<HomePage />} />
  <Route path="/login" element={<Login />} />
  <Route path="/register" element={<Register />} />

  {/* Protected Routes */}
  <Route
    path="/reservation"
    element={
      <ProtectedRoute>
        <ReservationForm />
      </ProtectedRoute>
    }
  />
  <Route
    path="/user-dashboard"
    element={
      <ProtectedRoute>
        <UserDashboard />
      </ProtectedRoute>
    }
  />
</Routes>
--------------------------------
Navbar purpose:
Provides navigation links for the application.
Dynamically displays links based on whether the user is logged in or not also based on role(admin or user)
Includes a logout button to clear the user's session.

--------------
about user and admin

const token = localStorage.getItem("token");
const role = localStorage.getItem("role");

Retrieves the token and role from localStorage to determine:
If the user is logged in (token exists).
The user's role (role is either "admin" or "user").

---------------------------
navigate("/login");
Redirects the user to the /login page using useNavigate.

--------------------------------------
Dynamic Navigation Links: 
Logic:
If the user is logged in (token exists):
Show links to:
User Dashboard (/user-dashboard).
Admin Dashboard (only if role === "admin").
A Logout button.
If the user is not logged in:
Show links to:
Login (/login).
Register (/register).


const navItems = () => (
  <div className="text-[18px] flex">
    <li>
      <Link to="/">Home</Link>
    </li>
    <li>
      <Link to="/reservation">Reservation</Link>
    </li>

    {token ? (
      <>
        <li>
          <Link to="/user-dashboard">User Dashboard</Link>
        </li>
        {role === "admin" && (
          <li>
            <a
              href="https://restaurant-reservation-sepia.vercel.app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Admin Dashboard
            </a>
          </li>
        )}
        <li>
          <button onClick={handleLogout} className="text-red-500">
            Logout
          </button>
        </li>
      </>
    ) : (
      <>
        <li>
          <Link to="/login">Login</Link>
        </li>
        <li>
          <Link to="/register">Register</Link>
        </li>
      </>
    )}
  </div>
);

---------------------------------------
state Mangagement: 
const [formData, setFormData] = useState({ email: "", password: "" });
formData:
Holds the email and password entered by the user.
Initially set to an empty email and password.
setFormData:
Updates the formData state when the user types in the input fields.

handing input change: 
const handleChange = (e) => {
  setFormData({ ...formData, [e.target.name]: e.target.value });
};


Login form submit: 
const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const response = await axios.post(
      "https://restaurant-reservation-1-dscy.onrender.com/api/auth/login",
      formData
    );
    const { token, role } = response.data;

    // Save token and role to localStorage
    localStorage.setItem("token", token);
    localStorage.setItem("role", role);

    toast.success("Login successful!");

    // Redirect based on role
    if (role === "admin") {
      navigate("/");
    } else {
      navigate("/user-dashboard");
    }
  } catch (error) {
    console.error("Login Error:", error);
    toast.error(error.response?.data?.message || "Login failed");
  }
};

Logic:
Prevents the default form submission behavior using e.preventDefault().
Sends a POST request to the backend login endpoint (/api/auth/login) with the user's email and password.
If the login is successful:
Extracts the token and role from the response.
Stores the token and role in localStorage.
Displays a success toast notification.
Redirects the user:
Admins are redirected to /.
Regular users are redirected to /user-dashboard.
If the login fails:
Logs the error to the console.
Displays an error toast notification with the error message.

----------------------------------
Form Rendering: 

<form onSubmit={handleSubmit} className="space-y-6">
  <div>
    <label className="block text-sm font-medium text-gray-300 mb-1">
      Email
    </label>
    <input
      type="email"
      name="email"
      value={formData.email}
      onChange={handleChange}
      className="w-full px-4 py-3 border border-gray-500 bg-gray-800/50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      placeholder="Enter your email"
    />
  </div>
  <div>
    <label className="block text-sm font-medium text-gray-300 mb-1">
      Password
    </label>
    <input
      type="password"
      name="password"
      value={formData.password}
      onChange={handleChange}
      className="w-full px-4 py-3 border border-gray-500 bg-gray-800/50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      placeholder="Enter your password"
    />
  </div>
  <button
    type="submit"
    className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition duration-200"
  >
    Login
  </button>
</form>

logic:
The form includes two input fields for email and password.
The onChange handler updates the formData state as the user types.
The onSubmit handler calls the handleSubmit function to process the login.
-------------------------------------
protected route,
import React from "react";
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const token = localStorage.getItem("token");

  // If no token is found, redirect to the login page
  if (!token) {
    return <Navigate to="/login" />;
  }

  // If token exists, render the protected component
  return children;
};

export default ProtectedRoute;

======================----------------
with mongoose CRUD operation:
index.js:
import express from "express";
import dotenv from "dotenv";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import route from "./routes/userRoute.js";

const app = express();
app.use(bodyParser.json());
dotenv.config();
const PORT = process.env.PORT || 5000;
const MONGO_URL = process.env.MONGO_URL;

mongoose
  .connect(MONGO_URL)
  .then(() => {
    console.log("MongoDB connected");

    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((erro) => console.log(error));

app.use("/api/user", route);
------------



userModel.js:

creatUser:
 const userData = new User(req.body);
    const { email } = userData;
	const existingUser = await User.findOne({ email });
	if (existingUser) {
      return res.status(400).json({ error: "User already exists" });
    }
    const savedUser = await userData.save();
	res.status(200).json(savedUser);
getAllUser:
const users = await User.find();
    if (!users || users.length === 0) {
      return res.status(404).json({ message: "User Not Found" });
    }
    return res.status(200).json(users);

updateUser:
const id = req.params.id;
    const userExist = await User.findOne({ _id: id });

    if (!userExist) {
      return res.status(404).json({ error: "User not found" });
    }
    const updatedUser = await User.findByIdAndUpdate(id, req.body, {
      new: true,
    });
    res.status(201).json(updateUser);
	
DeleteUser:
const id = req.params.id;
    const userExist = await User.findById({ _id: id });
    if (!userExist) {
      return res.status(404).json({ error: "User not found" });
    }
    await User.findByIdAndDelete(id);
    res.status(200).json({ message: "User deleted successfully" });

========================================







































